name: Common CI workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      runs_on:
        description: 'Type of machine + OS on which to run the tests'
        type: string
        default: 'ubuntu-latest'
      compiler:
        description: 'Compiler to use'
        type: string
        default: 'ocaml-base-compiler.5.0.0~beta2'
      compiler_branch:
        description: 'Source branch of the compiler, to set up caching properly (must be set if CI is not using a tagged release of OCaml)'
        type: string
        default: ''
      timeout:
        description: 'Timeout'
        type: number
        default: 180
      only_test:
        description: 'Only test to run (eg “src/array/lin_tests.exe”); whole suite is run if empty'
        type: string
        default: ''
      seed:
        description: 'Seed for the only test'
        type: string
        default: ''
      repeats:
        description: 'Number of test attempts'
        type: string
        default: '10'
      compiler_commit:
        description: 'Version (commit) of the OCaml compiler to use'
        type: string
        default: ''

jobs:
  build-and-test:
    env:
      ONLY_TEST: 'src/domain/domain_spawntree.exe'
      SEED: ${{ inputs.seed }}
      REPEATS: ${{ inputs.repeats }}
      OCAML_COMPILER_COMMIT: ${{ inputs.compiler_commit }}
      OCAML_COMPILER_BRANCH: ${{ inputs.compiler_branch }}

    runs-on: ${{ inputs.runs_on }}

    timeout-minutes: ${{ inputs.timeout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add dummy binaries to $PATH
        run: echo "PATH=$GITHUB_WORKSPACE/.github/bin:$PATH" >> $GITHUB_ENV

      - name: Pick up a robust cache prefix
        id: compute_prefix
        shell: bash
        run: |
          if [ -n "$OCAML_COMPILER_BRANCH" ]; then
            echo "cache_prefix=$(curl -sH "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/ocaml/ocaml/commits/$OCAML_COMPILER_BRANCH" | jq -r .commit.tree.sha)" >> "$GITHUB_OUTPUT"
          else
            echo "cache_prefix=v1" >> "$GITHUB_OUTPUT"
          fi
          cat "$GITHUB_OUTPUT"

      - name: Install OCaml compiler ${{ inputs.compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ inputs.compiler }}
          opam-repositories: |
            default: https://github.com/ocaml/opam-repository.git
            alpha: https://github.com/kit-ty-kate/opam-alpha-repository.git
          opam-depext: false
          dune-cache: true
          cache-prefix: ${{ steps.compute_prefix.outputs.cache_prefix }}

      - name: Override compiler to a particular commit
        if: inputs.OCAML_COMPILER_COMMIT != ''
        run: |
          wget "https://github.com/ocaml/ocaml/archive/$OCAML_COMPILER_COMMIT.tar.gz"
          tar xf "$OCAML_COMPILER_COMMIT.tar.gz"
          cd "ocaml-$OCAML_COMPILER_COMMIT"
          opam --cli=2.1 install -y --update-invariant .
          eval $(opam env)
          ocamlc -v

      - name: Install Multicore Tests dependencies
        run: |
          if [ "$RUNNER_OS" = "macOS" ]; then
            opam install . --deps-only --with-test -j1
          else
            opam install . --deps-only --with-test
          fi

      - name: Set QCHECK_MSG_INTERVAL to reduce noise and keep CI logs tidy
        run: echo "QCHECK_MSG_INTERVAL=60" >> $GITHUB_ENV

      - name: Build the test suite
        run: opam exec -- dune build
        if: inputs.ONLY_TEST == ''

      - name: Run the test suite
        run: opam exec -- dune runtest -j1 --no-buffer --display=quiet --cache=disabled --error-reporting=twice
        if: inputs.ONLY_TEST == ''

      - name: Run only one test
        run: |
          failures=0
          for i in `seq "$REPEATS"`; do
            if [ -n "$SEED" ]; then
              opam exec -- dune exec "$ONLY_TEST" -- -v -s "$SEED" || failures=$((failures + 1))
            else
              opam exec -- dune exec "$ONLY_TEST" -- -v || failures=$((failures + 1))
            fi
          done
          echo "Test failed $failures times"
          [ "$failures" = 0 ]
        if: inputs.ONLY_TEST != ''
