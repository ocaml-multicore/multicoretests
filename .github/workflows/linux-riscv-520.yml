name: Linux RISC-V 5.2.0

on: [push, pull_request, workflow_dispatch]

jobs:
  test:
    name: test on risc-v
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: riscv64
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          install: |
            echo "Install packages"
            apt-get update -q -y
            echo "Update done, installing packages"
            apt-get install -q -y git opam zstd
            echo "Running opam init"
            opam init --disable-sandboxing --auto-setup --bare --enable-shell-hook
            opam --version

          run: |
            uname -m
            echo ::set-output name=uname::$(uname -m)
            #
            # silence 'dubious ownership' error
            git config --global --add safe.directory /home/runner/work/multicoretests/multicoretests
            opam update
            #
            # Install OCaml compiler
            opam switch create default --repos default 5.2.0+trunk
            eval $(opam env --switch=default)
            #
            # Install Multicore Tests dependencies
            opam install . --deps-only --with-test -y
            #
            # Show configuration and clean up
            opam exec -- ocamlc -config
            opam config list
            opam exec -- dune printenv
            opam list --columns=name,installed-version,repository,synopsis-or-target
            opam clean --all-switches --unused-repositories --logs --download-cache --repo-cache
            #
            # Build the test suite
            opam exec -- dune build
            #
            # Run the internal package tests
            opam exec -- dune runtest -j1 --no-buffer --display=quiet --cache=disabled --error-reporting=twice test/
            #
            # Run the multicore test suite
            opam exec -- dune build "@ci" -j1 --no-buffer --display=quiet --cache=disabled --error-reporting=twice

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "uname output ${{ steps.runcmd.outputs.uname }}"
